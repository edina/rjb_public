#!/usr/bin/perl

=pod

=for Pod2Wiki

=head1 NAME

B<broker_review> - Checks target repositories to see if items transfered from the broker are available.

=head1 SYNOPSIS

B<broker_review> [B<options>] [ I<repository_id> [I<eprintid>] ]

=head1 DESCRIPTION

This script searches all items in the repository, finds those items that have been transferred (but not yet been seen live), and checks to see if they are available at the far end.

This check is by scraping the target URL web page for the title held by the broker.

=head1 ARGUMENTS

=over 8

=item B<repository_id> 

The ID of the eprint repository to use.

=item B<eprintid> 

An optional integer indicating that only the abstract page for record I<eprintid> should be updated. Handy for testing new configurations.


=back

=head1 OPTIONS

=over 8

=item B<--help>

Print a brief help message and exit.

=item B<--man>

Print the full manual page and then exit.

=item B<--quiet>

Be vewwy vewwy quiet. This option will supress all output unless an error occurs.

=item B<--verbose>

Explain in detail what is going on.
May be repeated for greater effect.

=item B<--version>

Output version information and exit.

=back   

=head1 DEPENDENCIES

The script pulls in the location of the EPrints install via the environment
variable C<EPrints_Home> and the name of the archive via C<EPrints_Repo>

=head1 AUTHOR

This script is specifically for the Open Access Repository Junction. This script was written by Ian Stuart


=head1 VERSION

EPrints Version: eprints-3.2.2 to eprints-3.2.10

=head1 CONTACT

Ian Stuart may be contacted at B<Ian.Stuart@ed.ac.uk>

=cut

use strict;
use warnings;
use English qw( -no_match_vars );

my $eprints_repo = $ENV{EPrints_Repo};

use lib( "$ENV{EPrints_Home}/perl_lib", );
use EPrints;
use LWP::UserAgent;
use AnyEvent::Strict;
use Sys::Hostname;
use Getopt::Long;
use Pod::Usage;

#use Data::Dumper;

my $version = 0;
my $verbose = 0;
my $quiet   = 0;
my $help    = 0;
my $man     = 0;

Getopt::Long::Configure("permute");

GetOptions(
  'help|?'   => \$help,
  'man'      => \$man,
  'version'  => \$version,
  'verbose+' => \$verbose,
  'silent'   => \$quiet,
  'quiet'    => \$quiet
) || pod2usage(2);
EPrints::Utils::cmd_version("broker_review") if $version;
pod2usage(1)                                 if $help;
pod2usage( -exitstatus => 0, -verbose => 2 ) if $man;

our $noise = 1;
$noise = 0            if ($quiet);
$noise = 1 + $verbose if ($verbose);

# Set STDOUT to auto flush (without needing a \n)
$| = 1;

my $repoid = $eprints_repo;

my $session = new EPrints::Session( 1, $repoid, $noise );
if ( !defined $session ) {
  print STDERR "Failed to load repository: $repoid\n";
  exit 1;
}
print "Set up searches\n" if ( $noise > 0 );

my $dso = $session->get_repository->get_dataset("archive");

my $searchexp1 = EPrints::Search->new(
  satisfy_all => 1,
  session     => $session,
  dataset     => $dso,
);    # open archive

# If a specific eprint is specified, set that
if ( defined $ARGV[1] ) {
  my $eprint = EPrints::DataObj::EPrint->new( $session, $ARGV[1] );
  if ( !defined $eprint ) {

    $session->get_repository->log( "EPrint #"
          . $ARGV[1]
          . " not found. Can't review something that doesn't exist." );
    $session->terminate();
    exit;
  } ## end if ( !defined $eprint )
  else {
    print "Restricting to item #$ARGV[1]\n" if ( $noise > 0 );
    $searchexp1->add_field( $dso->get_field("eprintid"), $ARGV[1] );
  }
} ## end if ( defined $ARGV[1] )
warn "set up date\n";
# now search for all eprints where we have sword credentials, but no
# date sent
my $date_range = '2000-01-01-3000-12-31';
$searchexp1->add_field( $dso->get_field("broker_sent"), $date_range );
$searchexp1->add_field( $dso->get_field("broker_live"), '', 'EX' );
    
print $searchexp1->render_description->toString if ( $noise > 0 );

print "Creating a list of items to review\n" if ( $noise > 0 );
my $results1 = $searchexp1->perform_search;

my $count = $results1->count;
print "$count eprints to check\n" if ( $noise > 0 );

# Create a table of things to check
$count = 0;
my @responses = ();
foreach my $epid ( sort @{ $results1->ids } ) {
  my $ep = $dso->dataobj($epid);

  # This is where we collect the results from our export
  # We keep the title and the response from the export function
  my %r = ();
  my $targets;
  my @listOfTargets;

  $r{'title'}      = $ep->value("title");
  $r{'provenance'} = $ep->value("provenance");
  $r{'id'}         = $ep->value("eprintid");
  $targets         = $ep->value("broker");

  # Because eprints tackles the issue of syncronising records across
  # multiple lists simply by having them in the same index in those lists,
  # we need to do is add a note of the sequence number for each target
  # in the list (we're about to lose the sequence, see below)
  for ( my $t = 0; $t < scalar @{$targets}; $t++ ) {
    $targets->[$t]->{'index'} = $t;
  }

  # a "uniq" for targets, based on repo ids
  my @t    = ( $targets->[0] );
  my $last = $targets->[0];
  foreach ( sort { $a->{'repoid'} cmp $b->{'repoid'} } @{$targets} ) {
    push( @listOfTargets, ( $last = $_ ) ) if ( $_ ne $last );
  }
  $r{'targets'} = \@listOfTargets;

  push @responses, \%r;
} ## end foreach my $epid ( sort @{ ...})
$results1->dispose;

if ( $noise > 0 ) {
  print( scalar @responses . " items to check\n" ) if ( $noise > 0 );
}

# Now loop through each item, and check to see which targets need to be
# reviewed
# but we need to do all this in parallel!
my $cv      = AE::cv;
my $arc_dir = $session->config('archiveroot');
$cv->begin;
foreach my $item (@responses) {
  my @listOfTargets = grep { exists $_->{'return'} } @{ $item->{targets} };
  my $eprintid = $item->{id};

  # This is from Tim Brody at Soton.
  # We clone the list of broker objects, edit
  # that list, and then save that back to the record.
  my $ep = $session->eprint($eprintid);
  my $v  = EPrints::Utils::clone( $ep->value('broker') );
  print "Checking eprint $eprintid " if ( $noise > 0 );

  unless ( scalar @listOfTargets ) {
    print "No targets for some reason!\n" if ( $noise > 0 );
  }
  else {

    # Now loop through the targets for this eprint, and update
    # $v as we get updates
    my $ua = LWP::UserAgent->new;

    foreach my $target (@listOfTargets) {

      # we don't want to process any that have already been tested
      if ( exists $target->{'target'} ) {
        print 'target set:' . $target->{'target'} . "\n" if ( $noise > 0 );
        next;
      }

      my $url = $target->{'return'};
      print "url: $url - " if ( $noise > 0 );

      # no longer asyncronous
      my $r = $ua->get($url);

      # We need the date for logging, as well as when the
      # item was sent
      my @t = localtime;
      my $date = ( $t[5] + 1900 ) . "-" . ( $t[4] + 1 ) . "-" . $t[3];

      # Keep a track of the logging
      my $log_string
          = scalar(CORE::localtime) . "|broker_review|$eprintid|$url|$date|";

      if ( $r->is_success ) {

        # Some pages are sent back as "Sucess" pages, but are actually
        # error pages - this should stop us processing them
        unless (
          ( $r->header('title') && ( $r->header('title') eq 'Page not found' )
          )
          || ( $r->header('title')
            && ( $r->header('title') eq 'System Error' ) )
            )
        {
          print "SUCCESS.\n" if ( $noise > 0 );

          my %headers;
          foreach my $h ( $r->headers->header_field_names ) {
            $headers{$h} = $r->header($h);
          }
          foreach my $h ( keys %{$target} ) {
            $headers{$h} = $target->{$h};
          }
          $headers{base} = $r->base->as_string;

          my $ep = $session->eprint($eprintid);

          $v->[ $target->{'index'} ]->{'live'}   = $date;
          $v->[ $target->{'index'} ]->{'target'} = $headers{base};

          $log_string .= $headers{base};
        } ## end unless ( ( $r->header('title'...)))
        else {
          print 'FAIL: ' . $r->header('title') . "\n" if ( $noise > 0 );

          # Keep a track of the logging
          $log_string .= "FAIL" . $r->header('title');

        } ## end else
      } ## end if ( $r->is_success )
      else {
        print 'FAIL: ' . $r->status_line . "\n" if ( $noise > 0 );

        # Keep a track of the logging
        $log_string .= 'FAIL: ' . $r->status_line;
      } ## end else [ if ( $r->is_success ) ]

      my $log_location
          = $session->config('archiveroot') . '/var' 
          . hostname
          . "-transfer_log";
      open( my $LOG, ">>$log_location" )
          or die("could not open log file $log_location");
      print {$LOG} "$log_string\n";
      close($LOG);

      # and let's put it in the error_log too since it's
      # dead useful
      $session->log("logging|$log_string");
    } ## end foreach my $target (@listOfTargets)
    $ep->set_value( 'broker', $v );
    $ep->commit;
  } ## end else
} ## end foreach my $item (@responses)
$cv->end;
$cv->recv;

$session->terminate();
exit;
